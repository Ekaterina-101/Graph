import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# –û–∂–∏–¥–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
expected_columns = [
    'probability', 'connected', 'no_articulation_points',
    'degree_limited', 'all_conditions', 'has_valid_subgraph',
    'avr_blue_conn', 'avr_blue_apb', 'avr_blue_deg', 'avr_blue_all'
]

file_path = '../results_regular_graph.txt'

try:
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –≥–∏–±–∫–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    df = pd.read_csv(
        file_path,
        sep=r',\s*|\s+,',  # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: –∑–∞–ø—è—Ç–∞—è + –ø—Ä–æ–±–µ–ª—ã
        engine='python',  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è regex
        names=expected_columns,
        skiprows=1,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        skipinitialspace=True,
        na_values=['-nan', 'nan', 'inf', '-inf'],
        keep_default_na=True
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —á–∏—Å–ª–∞
    for col in expected_columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    df = df.sort_values('probability').reset_index(drop=True)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑—É—Å–ª–æ–≤–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    df_unconditional = df.copy()

    # –£–º–Ω–æ–∂–∞–µ–º avr_blue_all –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
    df_unconditional['avr_blue_all'] = df_unconditional['avr_blue_all'] * df_unconditional['connected']

    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
    print(df_unconditional[['probability', 'avr_blue_all']].head(10))

except FileNotFoundError:
    print("‚ùå –§–∞–π–ª '../results_regular_graph.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    exit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ?
if df_unconditional['avr_blue_all'].dropna().empty:
    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–æ–Ω–∫–µ avr_blue_all ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª.")
    exit()

# === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ===
plt.figure(figsize=(12, 7))

# –î–∞–Ω–Ω—ã–µ
data = df_unconditional[['probability', 'avr_blue_all']].dropna()

# –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é ‚Äî —Å–∏–Ω—é—é
line = plt.plot(
    data['probability'], data['avr_blue_all'],
    label='Average number of "blue" graphs',
    color='blue',
    linestyle='-',
    marker='o',
    markersize=6,
    linewidth=2,
    alpha=0.85
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–¥ —Ç–æ—á–∫–∞–º–∏
for i, row in data.iterrows():
    x = row['probability']
    y = row['avr_blue_all']

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ ‚Äî —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤–∏–¥, –∏–Ω–∞—á–µ 2 –∑–Ω–∞–∫–∞
    if y < 0.01:
        label = f'{y:.1e}'  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2e-03
    else:
        label = f'{y:.2f}'  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.45

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—á–∫—É
    plt.annotate(
        label,
        (x, y),
        textcoords="offset points",
        xytext=(0, 8),  # –≤—ã—à–µ —Ç–æ—á–∫–∏ –Ω–∞ 8 –ø–∏–∫—Å–µ–ª–µ–π
        ha='center',
        fontsize=9,
        color='darkblue',
        alpha=0.9,
        rotation=0
    )

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
plt.xlabel('Share of visibility $Œ±$', fontsize=14)
plt.ylabel('Average number', fontsize=14)
plt.title('Average number of "blue" graphs per "red" graph (8 Vertices)', fontsize=16)

plt.legend(fontsize=12, loc='upper left')
plt.grid(True, alpha=0.3, linestyle='--', linewidth=0.7)

# –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ –ø–æ Y
plt.yscale('log')

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ X
plt.xlim(0, 1)
plt.xticks(np.arange(0, 1.1, 0.1))

plt.tight_layout()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º
output_path = '../graph_avr_blue_subgraphs_log_unconditional.png'
plt.savefig(output_path, dpi=300, bbox_inches='tight')
print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ '{output_path}'")

plt.show()

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
print("\nüìä –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω–∏—Ö –ø–æ–¥–≥—Ä–∞—Ñ–æ–≤, –≤—Å–µ —É—Å–ª–æ–≤–∏—è, –±–µ–∑—É—Å–ª–æ–≤–Ω—ã–µ):")
print(df_unconditional[['probability', 'avr_blue_all']].to_string(index=False, float_format="%.2f"))