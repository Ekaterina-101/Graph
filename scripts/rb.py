import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
file_path = '../results_regular_graph.txt'

# –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
expected_columns = [
    'probability', 'connected', 'no_articulation_points',
    'degree_limited', 'all_conditions', 'has_valid_subgraph',
    'avr_blue_conn', 'avr_blue_apb', 'avr_blue_deg', 'avr_blue_all'
]

try:
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –≥–∏–±–∫–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    df = pd.read_csv(
        file_path,
        sep=r',\s*|\s+,',
        engine='python',
        skipinitialspace=True,
        na_values=['-nan', 'nan', 'inf', '-inf'],
        comment=None
    )

    # –û—á–∏—â–∞–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    df.columns = df.columns.str.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
    if list(df.columns)[:len(expected_columns)] != expected_columns:
        print("‚ö†Ô∏è –ò–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç:")
        print("–û–∂–∏–¥–∞–ª–æ—Å—å:", expected_columns)
        print("–ü–æ–ª—É—á–µ–Ω–æ:", list(df.columns))
        if len(df.columns) >= 6:
            df = df.iloc[:, :10]
            df.columns = expected_columns
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –≤—Ä—É—á–Ω—É—é.")
        else:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Ñ–∞–π–ª–µ.")

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ
    cols_to_keep = ['probability', 'connected', 'has_valid_subgraph']
    df = df[cols_to_keep]

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞, –∑–∞–º–µ–Ω—è—è NaN –Ω–∞ 0
    for col in df.columns:
        if col != 'probability':
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—á–∏—â–µ–Ω—ã (NaN –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ 0):")
    print(df.head(10))

except FileNotFoundError:
    print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: '../results_regular_graph.txt'")
    exit()
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit()

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
df = df.sort_values('probability').reset_index(drop=True)

# === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ===
plt.figure(figsize=(16, 10))

# –õ–∏–Ω–∏–∏
line_configs = [
    {
        'column': 'connected',
        'color': 'red',
        'label': 'The "red" graph is connected',
        'linestyle': '-',
        'marker': 'o',
        'linewidth': 2.5,
        'markersize': 7,
        'alpha': 0.95
    },
    {
        'column': 'has_valid_subgraph',
        'color': 'blue',
        'label': 'Among the subgraphs of the "red" graph there is a "blue" graph',
        'linestyle': '--',
        'marker': 'o',
        'linewidth': 2.5,
        'markersize': 7,
        'alpha': 0.9
    }
]

# –°—Ç—Ä–æ–∏–º –ª–∏–Ω–∏–∏
for config in line_configs:
    col = config['column']
    plt.plot(
        df['probability'], df[col],
        color=config['color'],
        linestyle=config['linestyle'],
        marker=config['marker'],
        label=config['label'],
        linewidth=config['linewidth'],
        markersize=config['markersize'],
        alpha=config['alpha']
    )

# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–∞–º–∏
for idx, row in df.iterrows():
    p = row['probability']
    y_red = row['connected']
    y_blue = row['has_valid_subgraph']

    # –ö—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞
    if y_red > 0:
        plt.annotate(f'{y_red:.3f}',
                     xy=(p, y_red), xytext=(5, 5), textcoords='offset points',
                     fontsize=8, color='red', ha='left', va='bottom')

    # –°–∏–Ω—è—è —Ç–æ—á–∫–∞
    if y_blue > 0:
        plt.annotate(f'{y_blue:.3f}',
                     xy=(p, y_blue), xytext=(5, -5), textcoords='offset points',
                     fontsize=8, color='blue', ha='left', va='top')

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
plt.xlabel('Share of visibility $\\alpha$', fontsize=14)
plt.ylabel('Probability', fontsize=14)
plt.title('Probability Estimation (8 Vertices)', fontsize=16)

# –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞ (–≤–Ω—É—Ç—Ä–∏ –≥—Ä–∞—Ñ–∏–∫–∞, —Å–ø—Ä–∞–≤–∞)
plt.legend(fontsize=15, loc='lower right', bbox_to_anchor=(0.98, 0.02), borderaxespad=0.)

plt.grid(True, alpha=0.3, linestyle='--', linewidth=0.8)
plt.yscale('linear')
plt.ylim(0, 1.05)
plt.xlim(0, 1)
plt.xticks(np.arange(0, 1.1, 0.1))
plt.yticks(np.arange(0, 1.1, 0.1))

plt.tight_layout()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º
plt.savefig('../graph_results_connected_and_blue_linear_with_values.png', dpi=300, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ '../graph_results_connected_and_blue_linear_with_values.png'")

plt.show()

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
print("\nüìä –ß–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
print(df.to_string(index=False, float_format="%.4f"))